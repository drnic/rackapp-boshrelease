#!/usr/bin/env ruby

# Render the templates in your local release (job_path) into your /var/vcap/data/jobs (job_install_path)
# Any properties required by templates should be passed via a manifest file (manifest_path)
release_tgz      = ARGV.shift
job_path         = ARGV.shift
job_install_path = ARGV.shift
manifest_path    = ARGV.shift

base_dir = ENV['BASE_DIR'] || '/var/vcap'

def error_usage; $stderr.puts "USAGE: render_job_templates RELEASE_TGZ RELEASE_JOB_PATH JOB_INSTALL_PATH [MANIFEST_PATH]"; exit 1; end
def error_path_invalid(field); $stderr.puts "ERROR: Path #{field} does not exist"; error_usage; end

error_usage unless job_install_path
error_path_invalid('RELEASE_TGZ') unless File.exist?(release_tgz)
error_path_invalid('RELEASE_JOB_PATH') unless File.exist?(job_path)
error_path_invalid('JOB_INSTALL_PATH') unless File.exist?(job_install_path)

require "yaml"
require "erb"

require "rubygems"
require "webmock"
include WebMock::API

ENV["BUNDLE_GEMFILE"] = "/bosh/agent/Gemfile"
require "bundler/setup"
$:.unshift("/bosh/agent/lib")
require "agent"

if manifest_path
  error_path_invalid('MANIFEST_PATH') unless File.exist?(manifest_path)
  job_manifest = YAML.load_file(manifest_path)
end
job_manifest ||= {"properties" => {}}

job_MF = YAML.dump(job_manifest)

job_sha1 = Digest::SHA1.file(release_tgz).hexdigest
job_spec = {
  "name" => "rackapp",
  "template" => "rackapp",
  "version" => "0.1-dev",
  "sha1" => job_sha1,
  "blobstore_id" => "some_blobstore_id"
}

spec = {
  "deployment" => "rackapp",
  "release" => { "version" => "99" },
  "job" => job_spec,
  "packages" => {}, # package_specs ?
  "properties" => { "a" => "b" },
  "configuration_hash" => "deadbeef"
}

Bosh::Agent::Config.base_dir = base_dir
# config_binding = Bosh::Agent::Util.config_binding(deployment_manifest)
# job = Bosh::Agent::ApplyPlan::Job.new(valid_spec, config_binding)
# job.install

# plan = Bosh::Agent::ApplyPlan::Plan.new(spec)
# plan.install_job
# plan.configure_job
# plan.install_packages ??

# setup taken from apply_spec.rb in bosh/agent
Bosh::Agent::Config.setup({"logging" => { "file" => STDOUT, "level" => "DEBUG" }, "mbus" => nil, "blobstore_options" => {}})
Bosh::Agent::Config.blobstore_provider = "simple"
Bosh::Agent::Config.platform_name = "dummy"

FileUtils.mkdir_p(File.join(base_dir, 'monit'))
Bosh::Agent::Monit.setup_monit_user

# system_root = Bosh::Agent::Config.system_root
# FileUtils.mkdir_p(File.join(system_root, 'etc', 'logrotate.d'))

stub_request(:get, "http://resources/some_blobstore_id?").to_return(:body => File.read(release_tgz))


Bosh::Agent::Message::Apply.process([spec])
